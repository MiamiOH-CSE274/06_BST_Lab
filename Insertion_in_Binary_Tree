#include<iostream>
#include<stdio.h>
#include<queue>
using namespace std;
struct node
{
    int key;
    struct node *left,*right;//the left and right child
};
struct node *newnode(int key)//helper function to create a new node
{
    struct node *temp=new node;
    temp->key=key;
    temp->left=temp->right=NULL;
    return temp;
};
void inorder(struct node *temp)//inorder traversal of tree
{
    if (!temp)
        return;
    inorder(temp->left);
    cout<<temp->key<<" ";
    inorder(temp->right);
}
void insart(struct node *temp,int key)//insert function
{
    queue<struct node*>q;
    q.push(temp);
    while(!q.empty())
    {
        struct node *temp=q.front();
        q.pop();
        if (!temp->left)
        {
            temp->left=newnode(key);
            break;
        }
        else
        {
            q.push(temp->left);
        }
        if (!temp->right)
        {
            temp->right=newnode(key);
            break;
        }
        else
        {
            q.push(temp->right);
        }
    }
}
main()
{
    struct node *root=newnode(10);//the root of static tree is created here
    root->left=newnode(11);//left child of tree
    root->left->left = newnode(7);
    root->right=newnode(9);
    root->right->left = newnode(15);
    root->right->right = newnode(8);
    cout << "Inorder traversal before insertion:";
    inorder(root);
    int key = 12;
    insart(root, key);
    cout << endl;
    cout << "Inorder traversal after insertion:";
    inorder(root);


}//end of main
